{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlawl\\\\IdeaProjects\\\\wwoof-frontend\\\\wwoof-frontend\\\\src\\\\components\\\\board\\\\BoardDetailPage.js\",\n  _s = $RefreshSig$();\nimport { json, useRouteLoaderData } from \"react-router-dom\";\nimport BoardItem from './BoardItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BoardDetailPage() {\n  _s();\n  const data = useRouteLoaderData('board-detail');\n  // 1. App 에서 보낸 loader의 값을 id로 읽어서 사용함 \n  // 3. loader의 실행 결과로써 data \n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(BoardItem, {\n    board: data.board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 12\n  }, this);\n}\n_s(BoardDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = BoardDetailPage;\nexport default BoardDetailPage;\nexport async function loader(_ref) {\n  let {\n    request,\n    param\n  } = _ref;\n  const id = param.boardNum;\n  // 2. board-detail 에 매칭된 loader가 실행, 그때 param으로 path 들어옴   \n\n  const response = await fetch(\"http://localhost:8080/api/post/\" + id);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"BoardDetailPage\");","map":{"version":3,"names":["json","useRouteLoaderData","BoardItem","jsxDEV","_jsxDEV","BoardDetailPage","_s","data","console","log","board","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","_ref","request","param","id","boardNum","response","fetch","ok","message","status","$RefreshReg$"],"sources":["C:/Users/rlawl/IdeaProjects/wwoof-frontend/wwoof-frontend/src/components/board/BoardDetailPage.js"],"sourcesContent":["import { json, useRouteLoaderData } from \"react-router-dom\";\r\nimport BoardItem from './BoardItem';\r\n\r\nfunction BoardDetailPage() {\r\n    const data = useRouteLoaderData('board-detail'); \r\n    // 1. App 에서 보낸 loader의 값을 id로 읽어서 사용함 \r\n    // 3. loader의 실행 결과로써 data \r\n    console.log(data);\r\n\r\n    return <BoardItem board = {data.board} />\r\n\r\n}\r\n\r\nexport default BoardDetailPage;\r\n\r\nexport async function loader({ request, param }) {\r\n  const id = param.boardNum; \r\n  // 2. board-detail 에 매칭된 loader가 실행, 그때 param으로 path 들어옴   \r\n\r\n  const response = await fetch(\"http://localhost:8080/api/post/\" + id);\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not fetch events.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else{\r\n    return response;\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,kBAAkB,QAAQ,kBAAkB;AAC3D,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,IAAI,GAAGN,kBAAkB,CAAC,cAAc,CAAC;EAC/C;EACA;EACAO,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EAEjB,oBAAOH,OAAA,CAACF,SAAS;IAACQ,KAAK,EAAIH,IAAI,CAACG;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE7C;AAACR,EAAA,CARQD,eAAe;EAAA,QACPJ,kBAAkB;AAAA;AAAAc,EAAA,GAD1BV,eAAe;AAUxB,eAAeA,eAAe;AAE9B,OAAO,eAAeW,MAAMA,CAAAC,IAAA,EAAqB;EAAA,IAApB;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAC7C,MAAMG,EAAE,GAAGD,KAAK,CAACE,QAAQ;EACzB;;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,GAAGH,EAAE,CAAC;EACpE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMxB,IAAI,CACR;MAAEyB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAK;IACJ,OAAOJ,QAAQ;EACjB;AACF;AAAC,IAAAP,EAAA;AAAAY,YAAA,CAAAZ,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}