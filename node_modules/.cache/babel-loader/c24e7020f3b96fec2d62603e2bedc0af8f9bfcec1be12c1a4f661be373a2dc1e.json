{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlawl\\\\IdeaProjects\\\\wwoof-frontend\\\\wwoof-frontend\\\\src\\\\components\\\\mypage\\\\AddressFind.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDaumPostcodePopup } from \"react-daum-postcode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddressFind = props => {\n  _s();\n  const setInputAddress = props.setInputAddress;\n  const setLat = props.setLat;\n  const setLng = props.setLng;\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.text = `//dapi.kakao.com/v2/maps/sdk.js?appkey=6da7c37a54a54b5a4e25bc33459da757&libraries=services,clusterer&autoload=false`;\n  }, []);\n  const scriptUrl = \"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\";\n  const open = useDaumPostcodePopup(scriptUrl);\n  const geoCoder = new window.kakao.maps.services.Geocoder();\n  const getAddressCoords = address => {\n    return new Promise((resolve, reject) => {\n      geoCoder.addressSearch(address, (result, status) => {\n        if (status === window.kakao.maps.services.Status.OK) {\n          const coords = new window.kakao.maps.LatLng(result[0].x, result[0].y);\n          resolve(coords);\n        } else {\n          reject(status);\n        }\n      });\n    });\n  };\n  const handleComplete = async data => {\n    let fullAddress = data.address;\n    let extraAddress = \"\"; //추가될 주소\n    let townAddress = \"\";\n    //let localAddress = data.sido + ' ' + data.sigungu; //지역주소(시, 도 + 시, 군, 구)\n    let zipCode = '';\n    let mainAddress = '';\n    let x = 0;\n    let y = 0;\n    if (data.addressType === \"R\") {\n      //주소타입이 도로명주소일 경우\n      if (data.bname !== \"\") {\n        extraAddress += data.bname; //법정동, 법정리\n      }\n\n      if (data.buildingName !== \"\") {\n        //건물명\n        extraAddress += extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\n      }\n      townAddress = fullAddress += extraAddress !== \"\" ? `(${extraAddress})` : \"\";\n    }\n    mainAddress = data.roadAddress || data.jibunAddress;\n    const coords = await getAddressCoords(mainAddress);\n    x = coords.getLng();\n    y = coords.getLat();\n    setInputAddress(townAddress);\n    setLat(x); // 위도\n    setLng(y); // 경도\n  };\n  //클릭 시 발생할 이벤트\n  const handleClick = () => {\n    //주소검색이 완료되고, 결과 주소를 클릭 시 해당 함수 수행\n    open({\n      onComplete: handleComplete\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: handleClick,\n    children: \"\\uC8FC\\uC18C\\uCC3E\\uAE30\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(AddressFind, \"fzd5yqN/bEGMhoYgeaWy2f2CM9g=\", false, function () {\n  return [useDaumPostcodePopup];\n});\n_c = AddressFind;\nexport default AddressFind;\nvar _c;\n$RefreshReg$(_c, \"AddressFind\");","map":{"version":3,"names":["useEffect","useDaumPostcodePopup","jsxDEV","_jsxDEV","AddressFind","props","_s","setInputAddress","setLat","setLng","script","document","createElement","text","scriptUrl","open","geoCoder","window","kakao","maps","services","Geocoder","getAddressCoords","address","Promise","resolve","reject","addressSearch","result","status","Status","OK","coords","LatLng","x","y","handleComplete","data","fullAddress","extraAddress","townAddress","zipCode","mainAddress","addressType","bname","buildingName","roadAddress","jibunAddress","getLng","getLat","handleClick","onComplete","type","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rlawl/IdeaProjects/wwoof-frontend/wwoof-frontend/src/components/mypage/AddressFind.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDaumPostcodePopup } from \"react-daum-postcode\";\r\n\r\nconst AddressFind = (props) => {\r\n  const setInputAddress = props.setInputAddress;\r\n  const setLat = props.setLat;\r\n  const setLng = props.setLng;\r\n  \r\n  \r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.text = `//dapi.kakao.com/v2/maps/sdk.js?appkey=6da7c37a54a54b5a4e25bc33459da757&libraries=services,clusterer&autoload=false`;\r\n  }, []);\r\n\r\n  const scriptUrl =\r\n    \"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\";\r\n  const open = useDaumPostcodePopup(scriptUrl);\r\n\r\n  const geoCoder = new window.kakao.maps.services.Geocoder();\r\n  const getAddressCoords = (address) => {\r\n    return new Promise((resolve, reject) => {\r\n      geoCoder.addressSearch(address, (result, status) => {\r\n        if (status === window.kakao.maps.services.Status.OK) {\r\n          const coords = new window.kakao.maps.LatLng(result[0].x, result[0].y);\r\n          resolve(coords);\r\n        } else {\r\n          reject(status);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleComplete = async (data) => {\r\n    let fullAddress = data.address;\r\n    let extraAddress = \"\"; //추가될 주소\r\n    let townAddress = \"\";\r\n    //let localAddress = data.sido + ' ' + data.sigungu; //지역주소(시, 도 + 시, 군, 구)\r\n    let zipCode = '';\r\n    let mainAddress = '';\r\n    let x = 0;\r\n    let y = 0;\r\n    if (data.addressType === \"R\") {\r\n      //주소타입이 도로명주소일 경우\r\n      if (data.bname !== \"\") {\r\n        extraAddress += data.bname; //법정동, 법정리\r\n      }\r\n      if (data.buildingName !== \"\") {\r\n        //건물명\r\n        extraAddress +=\r\n          extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n      }\r\n      townAddress = fullAddress +=\r\n        extraAddress !== \"\" ? `(${extraAddress})` : \"\";\r\n    }\r\n    mainAddress = data.roadAddress || data.jibunAddress;\r\n    const coords = await getAddressCoords(mainAddress);\r\n    x = coords.getLng();\r\n    y = coords.getLat();\r\n    \r\n    setInputAddress(townAddress);\r\n    setLat(x); // 위도\r\n    setLng(y); // 경도\r\n\r\n  };\r\n  //클릭 시 발생할 이벤트\r\n  const handleClick = () => {\r\n    //주소검색이 완료되고, 결과 주소를 클릭 시 해당 함수 수행\r\n    open({ onComplete: handleComplete });\r\n  };\r\n  return (\r\n    <button type=\"button\" onClick={handleClick}>\r\n      주소찾기\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AddressFind;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}