{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlawl\\\\IdeaProjects\\\\wwoof-frontend\\\\wwoof-frontend\\\\src\\\\components\\\\mypage\\\\MyinfoHost.js\",\n  _s = $RefreshSig$();\nimport { Link } from \"react-router-dom\";\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport HostRegisterForm from \"./HostRegisterForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MyinfoHost() {\n  _s();\n  const host = useLoaderData();\n  console.log(host);\n  // loader를 이용해서 가져온 response 정보\n  if (!{\n    host\n  }) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC2E0\\uCCAD\\uB0B4\\uC5ED\\uC774 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"newHost\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          children: \"\\uAE00\\uB4F1\\uB85D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this), \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: host,\n        children: loadHost => /*#__PURE__*/_jsxDEV(HostRegisterForm, {\n          host: host,\n          method: \"PUT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(MyinfoHost, \"Ovi5TiDCGsyBhWQbTOQ5hCUJyzQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = MyinfoHost;\nexport default MyinfoHost;\nasync function loadHost() {\n  // 여기서 상세보기 조회 -> 값이 있으면 hostEdit -> hostRegisterForm에 method put으로\n  // 매번 token header 에 넣어서 보내야하는지 모르겠음\n  // user의 정보로 찾아야함\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n  const response = await fetch(\"http://localhost:8080/api/host/info\", {\n    method: \"GET\",\n    headers: headers\n  });\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  // 해당 로드 안에서 response 즉 Promise를 기다리는 것을 피하기 위함 }\n  return defer({\n    host: loadHost()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"MyinfoHost\");","map":{"version":3,"names":["Link","useLoaderData","json","defer","Await","Suspense","HostRegisterForm","jsxDEV","_jsxDEV","Fragment","_Fragment","MyinfoHost","_s","host","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","to","type","fallback","style","textAlign","resolve","loadHost","method","_c","headers","Headers","accessToken","localStorage","getItem","append","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/Users/rlawl/IdeaProjects/wwoof-frontend/wwoof-frontend/src/components/mypage/MyinfoHost.js"],"sourcesContent":["import { Link } from \"react-router-dom\";\r\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\nimport { Suspense } from \"react\";\r\nimport HostRegisterForm from \"./HostRegisterForm\";\r\n\r\nfunction MyinfoHost() {\r\n  const host = useLoaderData();\r\n  console.log(host);\r\n  // loader를 이용해서 가져온 response 정보\r\n  if (!{host}) {\r\n    return (\r\n      <>\r\n        <h2>신청내역이 없음</h2>\r\n        <Link to=\"newHost\"> \r\n          <button type=\"button\">글등록</button>s\r\n        </Link>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <Suspense fallback={<p style={{ textAlign: \"center\" }}>Loading</p>}>\r\n        <Await resolve={host}>\r\n          {(loadHost) => <HostRegisterForm host={host} method=\"PUT\" />}\r\n          {/* 수정으로 넘김 */}\r\n        </Await>\r\n      </Suspense>\r\n    );\r\n  }\r\n}\r\nexport default MyinfoHost;\r\n\r\nasync function loadHost() {\r\n  // 여기서 상세보기 조회 -> 값이 있으면 hostEdit -> hostRegisterForm에 method put으로\r\n  // 매번 token header 에 넣어서 보내야하는지 모르겠음\r\n  // user의 정보로 찾아야함\r\n  let headers = new Headers({\r\n    \"Content-Type\": \"application/json\",\r\n  });\r\n\r\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\r\n  if (accessToken && accessToken !== null) {\r\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\r\n  }\r\n  const response = await fetch(\"http://localhost:8080/api/host/info\", {\r\n    method: \"GET\",\r\n    headers: headers,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not fetch events.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    return response;\r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  // 해당 로드 안에서 response 즉 Promise를 기다리는 것을 피하기 위함 }\r\n  return defer({\r\n    host: loadHost(),\r\n  });\r\n}\r\n"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,SAASC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,gBAAgB,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGZ,aAAa,CAAC,CAAC;EAC5Ba,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACjB;EACA,IAAI,CAAC;IAACA;EAAI,CAAC,EAAE;IACX,oBACEL,OAAA,CAAAE,SAAA;MAAAM,QAAA,gBACER,OAAA;QAAAQ,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjBZ,OAAA,CAACR,IAAI;QAACqB,EAAE,EAAC,SAAS;QAAAL,QAAA,gBAChBR,OAAA;UAAQc,IAAI,EAAC,QAAQ;UAAAN,QAAA,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KACpC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA,eACP,CAAC;EAEP,CAAC,MAAM;IACL,oBACEZ,OAAA,CAACH,QAAQ;MAACkB,QAAQ,eAAEf,OAAA;QAAGgB,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAS,CAAE;QAAAT,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAE;MAAAJ,QAAA,eACjER,OAAA,CAACJ,KAAK;QAACsB,OAAO,EAAEb,IAAK;QAAAG,QAAA,EACjBW,QAAQ,iBAAKnB,OAAA,CAACF,gBAAgB;UAACO,IAAI,EAAEA,IAAK;UAACe,MAAM,EAAC;QAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEvD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAEf;AACF;AAACR,EAAA,CAvBQD,UAAU;EAAA,QACJV,aAAa;AAAA;AAAA4B,EAAA,GADnBlB,UAAU;AAwBnB,eAAeA,UAAU;AAEzB,eAAegB,QAAQA,CAAA,EAAG;EACxB;EACA;EACA;EACA,IAAIG,OAAO,GAAG,IAAIC,OAAO,CAAC;IACxB,cAAc,EAAE;EAClB,CAAC,CAAC;EAEF,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACxD,IAAIF,WAAW,IAAIA,WAAW,KAAK,IAAI,EAAE;IACvCF,OAAO,CAACK,MAAM,CAAC,eAAe,EAAE,SAAS,GAAGH,WAAW,CAAC;EAC1D;EACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;IAClET,MAAM,EAAE,KAAK;IACbE,OAAO,EAAEA;EACX,CAAC,CAAC;EAEF,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMpC,IAAI,CACR;MAAEqC,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB;EACA,OAAOtC,KAAK,CAAC;IACXU,IAAI,EAAEc,QAAQ,CAAC;EACjB,CAAC,CAAC;AACJ;AAAC,IAAAE,EAAA;AAAAa,YAAA,CAAAb,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}