{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlawl\\\\IdeaProjects\\\\wwoof-frontend\\\\wwoof-frontend\\\\src\\\\components\\\\mypage\\\\AddressFind.js\",\n  _s = $RefreshSig$();\nimport { useRef } from \"react\";\nimport { useDaumPostcodePopup } from 'react-daum-postcode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddressFind = props => {\n  _s();\n  const scriptUrl = 'https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js';\n  const open = useDaumPostcodePopup(scriptUrl);\n  const setInputAddress = props.setInputAddress;\n  const handleComplete = data => {\n    let fullAddress = data.address;\n    let extraAddress = ''; //추가될 주소\n    let townAddress = '';\n    //let localAddress = data.sido + ' ' + data.sigungu; //지역주소(시, 도 + 시, 군, 구)\n    if (data.addressType === 'R') {\n      //주소타입이 도로명주소일 경우\n      if (data.bname !== '') {\n        extraAddress += data.bname; //법정동, 법정리\n      }\n\n      if (data.buildingName !== '') {\n        //건물명\n        extraAddress += extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName;\n      }\n      townAddress = fullAddress += extraAddress !== '' ? `(${extraAddress})` : '';\n    }\n    setInputAddress(townAddress);\n  };\n  //클릭 시 발생할 이벤트\n  const handleClick = () => {\n    //주소검색이 완료되고, 결과 주소를 클릭 시 해당 함수 수행\n    open({\n      onComplete: handleComplete\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: handleClick,\n    children: \"\\uC8FC\\uC18C\\uCC3E\\uAE30\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n};\n_s(AddressFind, \"wdTqFaf4SE0v5bH+s4jJJmiPkAQ=\", false, function () {\n  return [useDaumPostcodePopup];\n});\n_c = AddressFind;\nexport default AddressFind;\nvar _c;\n$RefreshReg$(_c, \"AddressFind\");","map":{"version":3,"names":["useRef","useDaumPostcodePopup","jsxDEV","_jsxDEV","AddressFind","props","_s","scriptUrl","open","setInputAddress","handleComplete","data","fullAddress","address","extraAddress","townAddress","addressType","bname","buildingName","handleClick","onComplete","type","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rlawl/IdeaProjects/wwoof-frontend/wwoof-frontend/src/components/mypage/AddressFind.js"],"sourcesContent":["import { useRef } from \"react\";\r\nimport { useDaumPostcodePopup } from 'react-daum-postcode';\r\n \r\nconst AddressFind = (props) => {\r\n  const scriptUrl = 'https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js';\r\n  const open = useDaumPostcodePopup(scriptUrl);\r\n  const setInputAddress = props.setInputAddress;\r\n\r\n  const handleComplete = (data) => {\r\n    let fullAddress = data.address;\r\n    let extraAddress = ''; //추가될 주소\r\n    let townAddress = '';\r\n    //let localAddress = data.sido + ' ' + data.sigungu; //지역주소(시, 도 + 시, 군, 구)\r\n    if (data.addressType === 'R') { //주소타입이 도로명주소일 경우\r\n      if (data.bname !== '') {\r\n        extraAddress += data.bname; //법정동, 법정리\r\n      }\r\n      if (data.buildingName !== '') { //건물명\r\n        extraAddress += (extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName);\r\n      }\r\n      townAddress =  fullAddress += (extraAddress !== '' ? `(${extraAddress})` : '');\r\n    }\r\n    setInputAddress(townAddress);\r\n  }\r\n  //클릭 시 발생할 이벤트\r\n  const handleClick = () => {\r\n    //주소검색이 완료되고, 결과 주소를 클릭 시 해당 함수 수행\r\n  \topen({onComplete: handleComplete});\r\n  }\r\n  return <button type=\"button\" onClick={handleClick}>주소찾기</button>\r\n}\r\n \r\nexport default AddressFind;"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,oBAAoB,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7B,MAAMC,SAAS,GAAG,qEAAqE;EACvF,MAAMC,IAAI,GAAGP,oBAAoB,CAACM,SAAS,CAAC;EAC5C,MAAME,eAAe,GAAGJ,KAAK,CAACI,eAAe;EAE7C,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC/B,IAAIC,WAAW,GAAGD,IAAI,CAACE,OAAO;IAC9B,IAAIC,YAAY,GAAG,EAAE,CAAC,CAAC;IACvB,IAAIC,WAAW,GAAG,EAAE;IACpB;IACA,IAAIJ,IAAI,CAACK,WAAW,KAAK,GAAG,EAAE;MAAE;MAC9B,IAAIL,IAAI,CAACM,KAAK,KAAK,EAAE,EAAE;QACrBH,YAAY,IAAIH,IAAI,CAACM,KAAK,CAAC,CAAC;MAC9B;;MACA,IAAIN,IAAI,CAACO,YAAY,KAAK,EAAE,EAAE;QAAE;QAC9BJ,YAAY,IAAKA,YAAY,KAAK,EAAE,GAAI,KAAIH,IAAI,CAACO,YAAa,EAAC,GAAGP,IAAI,CAACO,YAAa;MACtF;MACAH,WAAW,GAAIH,WAAW,IAAKE,YAAY,KAAK,EAAE,GAAI,IAAGA,YAAa,GAAE,GAAG,EAAG;IAChF;IACAL,eAAe,CAACM,WAAW,CAAC;EAC9B,CAAC;EACD;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxB;IACDX,IAAI,CAAC;MAACY,UAAU,EAAEV;IAAc,CAAC,CAAC;EACnC,CAAC;EACD,oBAAOP,OAAA;IAAQkB,IAAI,EAAC,QAAQ;IAACC,OAAO,EAAEH,WAAY;IAAAI,QAAA,EAAC;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAClE,CAAC;AAAArB,EAAA,CA3BKF,WAAW;EAAA,QAEFH,oBAAoB;AAAA;AAAA2B,EAAA,GAF7BxB,WAAW;AA6BjB,eAAeA,WAAW;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}