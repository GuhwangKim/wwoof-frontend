{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlawl\\\\IdeaProjects\\\\wwoof-frontend\\\\wwoof-frontend\\\\src\\\\components\\\\board\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport BoardList from \"./BoardList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BoardsPage() {\n  _s();\n  const {\n    boards\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: boards,\n    children: loadEvent => /*#__PURE__*/_jsxDEV(BoardList, {\n      boards: loadEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 25\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this);\n}\n_s(BoardsPage, \"PA64UvKcfTOJ0RPEisomtOox+m0=\", false, function () {\n  return [useLoaderData];\n});\n_c = BoardsPage;\nexport default BoardsPage;\nexport async function loadBoard() {\n  const response = await fetch(\"http://localhost:8080/api/post/list\");\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    console.log(resData);\n    return resData.boards;\n  }\n}\n\n// export function loader() {\n//   // 해당 로드 안에서 response 즉 Promise를 기다리는 것을 피하기 위함 }\n//   return defer({\n//     boards: loadBoard(),\n//   });\n// }\nvar _c;\n$RefreshReg$(_c, \"BoardsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","Suspense","BoardList","jsxDEV","_jsxDEV","BoardsPage","_s","boards","resolve","children","loadEvent","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadBoard","response","fetch","ok","message","status","resData","console","log","$RefreshReg$"],"sources":["C:/Users/rlawl/IdeaProjects/wwoof-frontend/wwoof-frontend/src/components/board/Board.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\nimport { Suspense } from \"react\";\r\n\r\nimport BoardList from \"./BoardList\";\r\n\r\nfunction BoardsPage() {\r\n  const { boards } = useLoaderData();\r\n\r\n  return (\r\n\r\n      <Await resolve={boards}>\r\n        {(loadEvent) => <BoardList boards={loadEvent} />}\r\n      </Await>\r\n  );\r\n}\r\n\r\nexport default BoardsPage;\r\n\r\nexport async function loadBoard() {\r\n  const response = await fetch(\"http://localhost:8080/api/post/list\");\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: 'Could not fetch events.' };\r\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json(\r\n      { message: \"Could not fetch events.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n      const resData = await response.json();\r\n      console.log(resData);\r\n    return resData.boards;\r\n  }\r\n}\r\n\r\n// export function loader() {\r\n//   // 해당 로드 안에서 response 즉 Promise를 기다리는 것을 피하기 위함 }\r\n//   return defer({\r\n//     boards: loadBoard(),\r\n//   });\r\n// }\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,SAASC,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGV,aAAa,CAAC,CAAC;EAElC,oBAEIO,OAAA,CAACJ,KAAK;IAACQ,OAAO,EAAED,MAAO;IAAAE,QAAA,EACnBC,SAAS,iBAAKN,OAAA,CAACF,SAAS;MAACK,MAAM,EAAEG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEd;AAACR,EAAA,CATQD,UAAU;EAAA,QACER,aAAa;AAAA;AAAAkB,EAAA,GADzBV,UAAU;AAWnB,eAAeA,UAAU;AAEzB,OAAO,eAAeW,SAASA,CAAA,EAAG;EAChC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;EAEnE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMrB,IAAI,CACR;MAAEsB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACH,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACnB,IAAI,CAAC,CAAC;IACrCyB,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACtB,OAAOA,OAAO,CAACf,MAAM;EACvB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAQ,EAAA;AAAAU,YAAA,CAAAV,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}