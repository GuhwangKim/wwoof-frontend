{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlawl\\\\IdeaProjects\\\\wwoof-frontend\\\\wwoof-frontend\\\\src\\\\components\\\\mypage\\\\AddressFind.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useDaumPostcodePopup } from \"react-daum-postcode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddressFind = props => {\n  _s();\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.text = \"/\";\n  }, []);\n  const scriptUrl = \"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\";\n  const open = useDaumPostcodePopup(scriptUrl);\n  const setInputAddress = props.setInputAddress;\n  const handleComplete = data => {\n    let fullAddress = data.address;\n    let extraAddress = \"\"; //추가될 주소\n    let townAddress = \"\";\n    //let localAddress = data.sido + ' ' + data.sigungu; //지역주소(시, 도 + 시, 군, 구)\n    if (data.addressType === \"R\") {\n      //주소타입이 도로명주소일 경우\n      if (data.bname !== \"\") {\n        extraAddress += data.bname; //법정동, 법정리\n      }\n\n      if (data.buildingName !== \"\") {\n        //건물명\n        extraAddress += extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\n      }\n      townAddress = fullAddress += extraAddress !== \"\" ? `(${extraAddress})` : \"\";\n    }\n    setInputAddress(townAddress);\n  };\n  //클릭 시 발생할 이벤트\n  const handleClick = () => {\n    //주소검색이 완료되고, 결과 주소를 클릭 시 해당 함수 수행\n    open({\n      onComplete: handleComplete\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: handleClick,\n    children: \"\\uC8FC\\uC18C\\uCC3E\\uAE30\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(AddressFind, \"fzd5yqN/bEGMhoYgeaWy2f2CM9g=\", false, function () {\n  return [useDaumPostcodePopup];\n});\n_c = AddressFind;\nexport default AddressFind;\nvar _c;\n$RefreshReg$(_c, \"AddressFind\");","map":{"version":3,"names":["useEffect","useDaumPostcodePopup","jsxDEV","_jsxDEV","AddressFind","props","_s","script","document","createElement","text","scriptUrl","open","setInputAddress","handleComplete","data","fullAddress","address","extraAddress","townAddress","addressType","bname","buildingName","handleClick","onComplete","type","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rlawl/IdeaProjects/wwoof-frontend/wwoof-frontend/src/components/mypage/AddressFind.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useDaumPostcodePopup } from \"react-daum-postcode\";\r\n\r\nconst AddressFind = (props) => {\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\");\r\n    script.text = \"/\";\r\n  }, []);\r\n\r\n  const scriptUrl =\r\n    \"https://t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\";\r\n  const open = useDaumPostcodePopup(scriptUrl);\r\n  const setInputAddress = props.setInputAddress;\r\n\r\n  const handleComplete = (data) => {\r\n    let fullAddress = data.address;\r\n    let extraAddress = \"\"; //추가될 주소\r\n    let townAddress = \"\";\r\n    //let localAddress = data.sido + ' ' + data.sigungu; //지역주소(시, 도 + 시, 군, 구)\r\n    if (data.addressType === \"R\") {\r\n      //주소타입이 도로명주소일 경우\r\n      if (data.bname !== \"\") {\r\n        extraAddress += data.bname; //법정동, 법정리\r\n      }\r\n      if (data.buildingName !== \"\") {\r\n        //건물명\r\n        extraAddress +=\r\n          extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n      }\r\n      townAddress = fullAddress +=\r\n        extraAddress !== \"\" ? `(${extraAddress})` : \"\";\r\n    }\r\n\r\n    setInputAddress(townAddress);\r\n  };\r\n  //클릭 시 발생할 이벤트\r\n  const handleClick = () => {\r\n    //주소검색이 완료되고, 결과 주소를 클릭 시 해당 함수 수행\r\n    open({ onComplete: handleComplete });\r\n  };\r\n  return (\r\n    <button type=\"button\" onClick={handleClick}>\r\n      주소찾기\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AddressFind;\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,oBAAoB,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7BN,SAAS,CAAC,MAAM;IACd,MAAMO,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CF,MAAM,CAACG,IAAI,GAAG,GAAG;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,SAAS,GACb,qEAAqE;EACvE,MAAMC,IAAI,GAAGX,oBAAoB,CAACU,SAAS,CAAC;EAC5C,MAAME,eAAe,GAAGR,KAAK,CAACQ,eAAe;EAE7C,MAAMC,cAAc,GAAIC,IAAI,IAAK;IAC/B,IAAIC,WAAW,GAAGD,IAAI,CAACE,OAAO;IAC9B,IAAIC,YAAY,GAAG,EAAE,CAAC,CAAC;IACvB,IAAIC,WAAW,GAAG,EAAE;IACpB;IACA,IAAIJ,IAAI,CAACK,WAAW,KAAK,GAAG,EAAE;MAC5B;MACA,IAAIL,IAAI,CAACM,KAAK,KAAK,EAAE,EAAE;QACrBH,YAAY,IAAIH,IAAI,CAACM,KAAK,CAAC,CAAC;MAC9B;;MACA,IAAIN,IAAI,CAACO,YAAY,KAAK,EAAE,EAAE;QAC5B;QACAJ,YAAY,IACVA,YAAY,KAAK,EAAE,GAAI,KAAIH,IAAI,CAACO,YAAa,EAAC,GAAGP,IAAI,CAACO,YAAY;MACtE;MACAH,WAAW,GAAGH,WAAW,IACvBE,YAAY,KAAK,EAAE,GAAI,IAAGA,YAAa,GAAE,GAAG,EAAE;IAClD;IAEAL,eAAe,CAACM,WAAW,CAAC;EAC9B,CAAC;EACD;EACA,MAAMI,WAAW,GAAGA,CAAA,KAAM;IACxB;IACAX,IAAI,CAAC;MAAEY,UAAU,EAAEV;IAAe,CAAC,CAAC;EACtC,CAAC;EACD,oBACEX,OAAA;IAAQsB,IAAI,EAAC,QAAQ;IAACC,OAAO,EAAEH,WAAY;IAAAI,QAAA,EAAC;EAE5C;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb,CAAC;AAACzB,EAAA,CA1CIF,WAAW;EAAA,QAQFH,oBAAoB;AAAA;AAAA+B,EAAA,GAR7B5B,WAAW;AA4CjB,eAAeA,WAAW;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}