{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlawl\\\\IdeaProjects\\\\wwoof-frontend\\\\wwoof-frontend\\\\src\\\\components\\\\board\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport BoardList from \"./BoardList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BoardsPage() {\n  _s();\n  const {\n    boards\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: boards,\n      children: loadBoard => /*#__PURE__*/_jsxDEV(BoardList, {\n        boards: loadBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n_s(BoardsPage, \"PA64UvKcfTOJ0RPEisomtOox+m0=\", false, function () {\n  return [useLoaderData];\n});\n_c = BoardsPage;\nexport default BoardsPage;\nasync function loadBoard() {\n  const response = await fetch(\"http://localhost:8080/api/post/list\");\n  if (!response.ok) {\n    // return { isError: true, message: 'Could not fetch events.' };\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\n    //   status: 500,\n    // });\n    throw json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData;\n  }\n}\nexport function loader() {\n  // 해당 로드 안에서 response 즉 Promise를 기다리는 것을 피하기 위함 }\n  return defer({\n    boards: loadBoard()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"BoardsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","Suspense","BoardList","jsxDEV","_jsxDEV","BoardsPage","_s","boards","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadBoard","_c","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["C:/Users/rlawl/IdeaProjects/wwoof-frontend/wwoof-frontend/src/components/board/Board.js"],"sourcesContent":["\r\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\r\nimport { Suspense } from \"react\";\r\n\r\nimport BoardList from \"./BoardList\";\r\n\r\n\r\nfunction BoardsPage() {\r\n  const { boards } = useLoaderData();\r\n  return (\r\n    <Suspense fallback={<p style={{ textAlign: \"center\" }}>Loading</p>}>\r\n      <Await resolve={boards}>\r\n        {(loadBoard) => <BoardList boards={loadBoard} />}\r\n      </Await>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default BoardsPage;\r\n\r\nasync function loadBoard() {\r\n  const response = await fetch(\"http://localhost:8080/api/post/list\");\r\n\r\n  if (!response.ok) {\r\n    // return { isError: true, message: 'Could not fetch events.' };\r\n    // throw new Response(JSON.stringify({ message: 'Could not fetch events.' }), {\r\n    //   status: 500,\r\n    // });\r\n    throw json(\r\n      { message: \"Could not fetch events.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData;\r\n  }\r\n}\r\nexport function loader() {\r\n  // 해당 로드 안에서 response 즉 Promise를 기다리는 것을 피하기 위함 }\r\n  return defer({\r\n    boards: loadBoard(),\r\n  });\r\n}"],"mappings":";;AACA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,SAASC,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGpC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGV,aAAa,CAAC,CAAC;EAClC,oBACEO,OAAA,CAACH,QAAQ;IAACO,QAAQ,eAAEJ,OAAA;MAAGK,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAC,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eACjEP,OAAA,CAACJ,KAAK;MAACgB,OAAO,EAAET,MAAO;MAAAI,QAAA,EACnBM,SAAS,iBAAKb,OAAA,CAACF,SAAS;QAACK,MAAM,EAAEU;MAAU;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEf;AAACT,EAAA,CATQD,UAAU;EAAA,QACER,aAAa;AAAA;AAAAqB,EAAA,GADzBb,UAAU;AAWnB,eAAeA,UAAU;AAEzB,eAAeY,SAASA,CAAA,EAAG;EACzB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;EAEnE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA,MAAMvB,IAAI,CACR;MAAEwB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACrB,IAAI,CAAC,CAAC;IACrC,OAAO0B,OAAO;EAChB;AACF;AACA,OAAO,SAASC,MAAMA,CAAA,EAAG;EACvB;EACA,OAAO1B,KAAK,CAAC;IACXQ,MAAM,EAAEU,SAAS,CAAC;EACpB,CAAC,CAAC;AACJ;AAAC,IAAAC,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}